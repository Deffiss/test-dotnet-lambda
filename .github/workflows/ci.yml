name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

env:
  ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'qa' }}
  AWS_STACK: ${{ format('{0}-{1}-stack', vars.PROJECT_NAME, github.ref == 'refs/heads/main' && 'prod' || 'qa') }}
  BUCKET: ${{ format('{0}-{1}', vars.S3_SAM_BUCKET, github.ref == 'refs/heads/main' && 'prod' || 'qa') }}
  PREFIX: ${{ format('{0}-{1}/', vars.PROJECT_NAME, github.ref == 'refs/heads/main' && 'prod' || 'qa') }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3.2.0
        # with: 
        #   dotnet-version: 6.x

      - name: Run proj build
        run: dotnet build -c Release

      - name: Run tests
        run: dotnet test ./test/${{ vars.PROJECT_NAME }}.Tests

  deploy:
    runs-on: ubuntu-latest

    needs: [build]

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check bucket existance
        id: bucket-check
        continue-on-error: true
        run: aws s3 ls "${{ env.BUCKET }}" || aws s3 mb s3://${{ env.BUCKET }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3.2.0

      - name: Install dotnet lambda tool
        run: dotnet tool install -g Amazon.Lambda.Tools

      - name: Deploy
        run: |
            dotnet lambda deploy-serverless \
              -pl ./src/${{ vars.PROJECT_NAME }} \
              -sn ${{ env.AWS_STACK }} \
              -tp Env=${{ env.ENV }}\
              -sb ${{ env.BUCKET }}\
              -sp ${{ env.PREFIX }}
